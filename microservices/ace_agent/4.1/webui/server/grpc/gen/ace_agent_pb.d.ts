//
// Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

// @generated by protoc-gen-es v1.8.0
// @generated from file ace_agent.proto (package nvidia.aceagent.chatcontroller.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * Message type field for Chat controller metadata streaming
 *
 * @generated from enum nvidia.aceagent.chatcontroller.v1.MessageType
 */
export declare enum MessageType {
  /**
   * @generated from enum value: UNKNOWN_RESPONSE = 0;
   */
  UNKNOWN_RESPONSE = 0,

  /**
   * @generated from enum value: ASR_RESPONSE = 1;
   */
  ASR_RESPONSE = 1,

  /**
   * @generated from enum value: CHAT_ENGINE_RESPONSE = 2;
   */
  CHAT_ENGINE_RESPONSE = 2,

  /**
   * @generated from enum value: TTS_RESPONSE = 3;
   */
  TTS_RESPONSE = 3,

  /**
   * @generated from enum value: PIPELINE_STATE_RESPONSE = 4;
   */
  PIPELINE_STATE_RESPONSE = 4,

  /**
   * @generated from enum value: DISPLAY_TEXT = 5;
   */
  DISPLAY_TEXT = 5,
}

/**
 *
 * Generic Chat controller API status
 *
 * @generated from enum nvidia.aceagent.chatcontroller.v1.APIStatus
 */
export declare enum APIStatus {
  /**
   * @generated from enum value: UNKNOWN_STATUS = 0;
   */
  UNKNOWN_STATUS = 0,

  /**
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: PIPELINE_AVAILABLE = 2;
   */
  PIPELINE_AVAILABLE = 2,

  /**
   * @generated from enum value: PIPELINE_NOT_AVAILABLE = 3;
   */
  PIPELINE_NOT_AVAILABLE = 3,

  /**
   * @generated from enum value: BUSY = 4;
   */
  BUSY = 4,

  /**
   * @generated from enum value: ERROR = 5;
   */
  ERROR = 5,

  /**
   * @generated from enum value: INFO = 6;
   */
  INFO = 6,
}

/**
 *
 * Chat controller Pipeline States
 *
 * @generated from enum nvidia.aceagent.chatcontroller.v1.PipelineState
 */
export declare enum PipelineState {
  /**
   * @generated from enum value: INIT = 0;
   */
  INIT = 0,

  /**
   * @generated from enum value: IDLE = 1;
   */
  IDLE = 1,

  /**
   * @generated from enum value: WAIT_FOR_TRIGGER = 2;
   */
  WAIT_FOR_TRIGGER = 2,

  /**
   * @generated from enum value: ASR_ACTIVE = 3;
   */
  ASR_ACTIVE = 3,

  /**
   * @generated from enum value: DM_ACTIVE = 4;
   */
  DM_ACTIVE = 4,

  /**
   * @generated from enum value: TTS_ACTIVE = 5;
   */
  TTS_ACTIVE = 5,
}

/**
 *
 * AudioEncoding specifies the encoding of the audio bytes in the encapsulating message.
 *
 * @generated from enum nvidia.aceagent.chatcontroller.v1.AudioEncoding
 */
export declare enum AudioEncoding {
  /**
   * Not specified.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   *
   * @generated from enum value: LINEAR_PCM = 1;
   */
  LINEAR_PCM = 1,

  /**
   * `FLAC` (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
   * encoding supports 16-bit and 24-bit samples, however, not all fields in
   * `STREAMINFO` are supported.
   *
   * @generated from enum value: FLAC = 2;
   */
  FLAC = 2,

  /**
   * 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
   *
   * @generated from enum value: MULAW = 3;
   */
  MULAW = 3,

  /**
   * 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
   *
   * @generated from enum value: ALAW = 5;
   */
  ALAW = 5,
}

/**
 *
 * Used in storing conversation history for user and bot
 *
 * @generated from enum nvidia.aceagent.chatcontroller.v1.Role
 */
export declare enum Role {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: BOT = 2;
   */
  BOT = 2,

  /**
   * @generated from enum value: SYSTEM = 3;
   */
  SYSTEM = 3,
}

/**
 *
 * The SendAudioRequest is used to send either StreamingRecognitionConfig message
 * or audio content. The first SendAudioRequest message must contain a
 * StreamingRecognitionConfig message, followed by the audio content messages.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.SendAudioRequest
 */
export declare class SendAudioRequest extends Message<SendAudioRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * The streaming request, which is either a streaming config or audio content.
   *
   * @generated from oneof nvidia.aceagent.chatcontroller.v1.SendAudioRequest.streaming_request
   */
  streamingRequest: {
    /**
     * Provides information to the recognizer that specifies how to process the
     * request. The first `SendAudioRequest` message must contain a
     * `streaming_config`  message.
     *
     * @generated from field: nvidia.aceagent.chatcontroller.v1.StreamingRecognitionConfig streaming_config = 2;
     */
    value: StreamingRecognitionConfig;
    case: "streamingConfig";
  } | {
    /**
     * The audio data to be recognized. Sequential chunks of audio data are
     * streamed from client.
     *
     * @generated from field: bytes audio_content = 3;
     */
    value: Uint8Array;
    case: "audioContent";
  } | { case: undefined; value?: undefined };

  /**
   * source id of the audio data
   *
   * @generated from field: string source_id = 4;
   */
  sourceId: string;

  /**
   * audio buffer creation timestamp in ISO8601 format
   *
   * @generated from field: string create_time = 5;
   */
  createTime: string;

  constructor(data?: PartialMessage<SendAudioRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.SendAudioRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendAudioRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendAudioRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendAudioRequest;

  static equals(a: SendAudioRequest | PlainMessage<SendAudioRequest> | undefined, b: SendAudioRequest | PlainMessage<SendAudioRequest> | undefined): boolean;
}

/**
 * Provides information to the ASR recognizer about incoming audio data
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.StreamingRecognitionConfig
 */
export declare class StreamingRecognitionConfig extends Message<StreamingRecognitionConfig> {
  /**
   * The encoding of the audio data sent in the request.
   *
   * All encodings support only 1 channel (mono) audio.
   *
   * @generated from field: nvidia.aceagent.chatcontroller.v1.AudioEncoding encoding = 1;
   */
  encoding: AudioEncoding;

  /**
   * The sample rate in hertz (Hz) of the audio data sent in the
   * `SendAudioRequest` message.
   *
   * @generated from field: int32 sample_rate_hertz = 2;
   */
  sampleRateHertz: number;

  /**
   * The language of the supplied audio as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   * Default is en-US.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;

  /**
   * The number of channels in the input audio data.
   *
   * @generated from field: int32 audio_channel_count = 4;
   */
  audioChannelCount: number;

  /**
   * Which model to select for the given request.
   *
   * @generated from field: string model = 5;
   */
  model: string;

  constructor(data?: PartialMessage<StreamingRecognitionConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.StreamingRecognitionConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamingRecognitionConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamingRecognitionConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamingRecognitionConfig;

  static equals(a: StreamingRecognitionConfig | PlainMessage<StreamingRecognitionConfig> | undefined, b: StreamingRecognitionConfig | PlainMessage<StreamingRecognitionConfig> | undefined): boolean;
}

/**
 *
 * ReceiveAudioRequest is used to request audio data for specified stream_id.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ReceiveAudioRequest
 */
export declare class ReceiveAudioRequest extends Message<ReceiveAudioRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  constructor(data?: PartialMessage<ReceiveAudioRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ReceiveAudioRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceiveAudioRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceiveAudioRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceiveAudioRequest;

  static equals(a: ReceiveAudioRequest | PlainMessage<ReceiveAudioRequest> | undefined, b: ReceiveAudioRequest | PlainMessage<ReceiveAudioRequest> | undefined): boolean;
}

/**
 *
 * StreamingSpeechResultsRequest is used to request various results from chat
 * controller.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.StreamingSpeechResultsRequest
 */
export declare class StreamingSpeechResultsRequest extends Message<StreamingSpeechResultsRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * uuid to identify concurrent client request
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  constructor(data?: PartialMessage<StreamingSpeechResultsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.StreamingSpeechResultsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamingSpeechResultsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamingSpeechResultsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamingSpeechResultsRequest;

  static equals(a: StreamingSpeechResultsRequest | PlainMessage<StreamingSpeechResultsRequest> | undefined, b: StreamingSpeechResultsRequest | PlainMessage<StreamingSpeechResultsRequest> | undefined): boolean;
}

/**
 *
 * PipelineRequest is used to create/free pipeline specified using stream_id
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.PipelineRequest
 */
export declare class PipelineRequest extends Message<PipelineRequest> {
  /**
   * A  unique id sent by the client to identify the client connection.
   * It is mapped to a unique pipeline on the Chat Controller server.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  constructor(data?: PartialMessage<PipelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.PipelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineRequest;

  static equals(a: PipelineRequest | PlainMessage<PipelineRequest> | undefined, b: PipelineRequest | PlainMessage<PipelineRequest> | undefined): boolean;
}

/**
 *
 * UserParametersRequest is used to set user parameters
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.UserParametersRequest
 */
export declare class UserParametersRequest extends Message<UserParametersRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * used id
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * bot name with version like {bot_name}_v{bot_version}, e.g chitchat_bot_v1.
   *
   * @generated from field: string bot_name = 3;
   */
  botName: string;

  constructor(data?: PartialMessage<UserParametersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.UserParametersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserParametersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserParametersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserParametersRequest;

  static equals(a: UserParametersRequest | PlainMessage<UserParametersRequest> | undefined, b: UserParametersRequest | PlainMessage<UserParametersRequest> | undefined): boolean;
}

/**
 *
 * GetStatusRequest used to get on demand Chat controller pipeline status
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.GetStatusRequest
 */
export declare class GetStatusRequest extends Message<GetStatusRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  constructor(data?: PartialMessage<GetStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.GetStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusRequest;

  static equals(a: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined, b: GetStatusRequest | PlainMessage<GetStatusRequest> | undefined): boolean;
}

/**
 *
 * SpeechRecognitionControlRequest is used for controlling input to
 * ASR internally muting ASR.
 * It is also used to disable DM-TTS flow for the incoming ASR input
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.SpeechRecognitionControlRequest
 */
export declare class SpeechRecognitionControlRequest extends Message<SpeechRecognitionControlRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * Flag to mention whether asr transcripts to be passed to DM-TTS or get
   * only transcripts
   *
   * @generated from field: bool is_standalone = 2;
   */
  isStandalone: boolean;

  constructor(data?: PartialMessage<SpeechRecognitionControlRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.SpeechRecognitionControlRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeechRecognitionControlRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeechRecognitionControlRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeechRecognitionControlRequest;

  static equals(a: SpeechRecognitionControlRequest | PlainMessage<SpeechRecognitionControlRequest> | undefined, b: SpeechRecognitionControlRequest | PlainMessage<SpeechRecognitionControlRequest> | undefined): boolean;
}

/**
 *
 * Reload Speech Configs Request
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ReloadSpeechConfigsRequest
 */
export declare class ReloadSpeechConfigsRequest extends Message<ReloadSpeechConfigsRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  constructor(data?: PartialMessage<ReloadSpeechConfigsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ReloadSpeechConfigsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReloadSpeechConfigsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReloadSpeechConfigsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReloadSpeechConfigsRequest;

  static equals(a: ReloadSpeechConfigsRequest | PlainMessage<ReloadSpeechConfigsRequest> | undefined, b: ReloadSpeechConfigsRequest | PlainMessage<ReloadSpeechConfigsRequest> | undefined): boolean;
}

/**
 *
 * UserContextRequest used to request user context
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.UserContextRequest
 */
export declare class UserContextRequest extends Message<UserContextRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  constructor(data?: PartialMessage<UserContextRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.UserContextRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserContextRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserContextRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserContextRequest;

  static equals(a: UserContextRequest | PlainMessage<UserContextRequest> | undefined, b: UserContextRequest | PlainMessage<UserContextRequest> | undefined): boolean;
}

/**
 *
 * UserContext data containing user specific information.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.UserContext
 */
export declare class UserContext extends Message<UserContext> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * bot name with version like {bot_name}_v{bot_version}, e.g chitchat_bot_v1.
   *
   * @generated from field: string bot_name = 3;
   */
  botName: string;

  /**
   * conversation history of user
   *
   * @generated from field: repeated nvidia.aceagent.chatcontroller.v1.ConversationHistory conversation_history = 4;
   */
  conversationHistory: ConversationHistory[];

  /**
   * json formatted data of user context
   *
   * @generated from field: string context_json = 5;
   */
  contextJson: string;

  constructor(data?: PartialMessage<UserContext>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.UserContext";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserContext;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserContext;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserContext;

  static equals(a: UserContext | PlainMessage<UserContext> | undefined, b: UserContext | PlainMessage<UserContext> | undefined): boolean;
}

/**
 * @generated from message nvidia.aceagent.chatcontroller.v1.ConversationHistory
 */
export declare class ConversationHistory extends Message<ConversationHistory> {
  /**
   * bot name with version like {bot_name}_v{bot_version}, e.g chitchat_bot_v1.
   *
   * @generated from field: string bot_name = 1;
   */
  botName: string;

  /**
   * @generated from field: repeated nvidia.aceagent.chatcontroller.v1.ConversationInstance conversation = 2;
   */
  conversation: ConversationInstance[];

  constructor(data?: PartialMessage<ConversationHistory>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ConversationHistory";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationHistory;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationHistory;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationHistory;

  static equals(a: ConversationHistory | PlainMessage<ConversationHistory> | undefined, b: ConversationHistory | PlainMessage<ConversationHistory> | undefined): boolean;
}

/**
 * @generated from message nvidia.aceagent.chatcontroller.v1.ConversationInstance
 */
export declare class ConversationInstance extends Message<ConversationInstance> {
  /**
   * @generated from field: nvidia.aceagent.chatcontroller.v1.Role role = 1;
   */
  role: Role;

  /**
   * @generated from field: string content = 2;
   */
  content: string;

  constructor(data?: PartialMessage<ConversationInstance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ConversationInstance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversationInstance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversationInstance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversationInstance;

  static equals(a: ConversationInstance | PlainMessage<ConversationInstance> | undefined, b: ConversationInstance | PlainMessage<ConversationInstance> | undefined): boolean;
}

/**
 * Chat controller pipeline status response
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.GetStatusResponse
 */
export declare class GetStatusResponse extends Message<GetStatusResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * @generated from field: nvidia.aceagent.chatcontroller.v1.PipelineStateResponse pipeline_state = 2;
   */
  pipelineState?: PipelineStateResponse;

  constructor(data?: PartialMessage<GetStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.GetStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatusResponse;

  static equals(a: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined, b: GetStatusResponse | PlainMessage<GetStatusResponse> | undefined): boolean;
}

/**
 * Chat controller Metadata streaming response
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.StreamingSpeechResultsResponse
 */
export declare class StreamingSpeechResultsResponse extends Message<StreamingSpeechResultsResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * message type as defined in `MessageType`
   *
   * @generated from field: nvidia.aceagent.chatcontroller.v1.MessageType message_type = 2;
   */
  messageType: MessageType;

  /**
   * @generated from oneof nvidia.aceagent.chatcontroller.v1.StreamingSpeechResultsResponse.metadata
   */
  metadata: {
    /**
     * @generated from field: nvidia.aceagent.chatcontroller.v1.ASRResult asr_result = 3;
     */
    value: ASRResult;
    case: "asrResult";
  } | {
    /**
     * @generated from field: nvidia.aceagent.chatcontroller.v1.ChatEngineResponse chat_engine_response = 4;
     */
    value: ChatEngineResponse;
    case: "chatEngineResponse";
  } | {
    /**
     * @generated from field: nvidia.aceagent.chatcontroller.v1.TTSResult tts_result = 5;
     */
    value: TTSResult;
    case: "ttsResult";
  } | {
    /**
     * @generated from field: nvidia.aceagent.chatcontroller.v1.PipelineStateResponse pipeline_state = 6;
     */
    value: PipelineStateResponse;
    case: "pipelineState";
  } | {
    /**
     * @generated from field: string display_text = 7;
     */
    value: string;
    case: "displayText";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<StreamingSpeechResultsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.StreamingSpeechResultsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamingSpeechResultsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamingSpeechResultsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamingSpeechResultsResponse;

  static equals(a: StreamingSpeechResultsResponse | PlainMessage<StreamingSpeechResultsResponse> | undefined, b: StreamingSpeechResultsResponse | PlainMessage<StreamingSpeechResultsResponse> | undefined): boolean;
}

/**
 * ASR Result
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ASRResult
 */
export declare class ASRResult extends Message<ASRResult> {
  /**
   * Complete ASR Response in Riva Skills ASR result schema
   *
   * @generated from field: nvidia.aceagent.chatcontroller.v1.StreamingRecognitionResult results = 1;
   */
  results?: StreamingRecognitionResult;

  /**
   * @generated from field: float latency_ms = 2;
   */
  latencyMs: number;

  /**
   * start time in ISO8601 format, e.g. 2024-03-08T13:33:30.736Z
   *
   * @generated from field: string start_time = 3;
   */
  startTime: string;

  /**
   * stop time in ISO8601 format
   *
   * @generated from field: string stop_time = 4;
   */
  stopTime: string;

  constructor(data?: PartialMessage<ASRResult>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ASRResult";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ASRResult;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ASRResult;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ASRResult;

  static equals(a: ASRResult | PlainMessage<ASRResult> | undefined, b: ASRResult | PlainMessage<ASRResult> | undefined): boolean;
}

/**
 * A streaming speech recognition result corresponding to a portion of the audio
 * that is currently being processed.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.StreamingRecognitionResult
 */
export declare class StreamingRecognitionResult extends Message<StreamingRecognitionResult> {
  /**
   * May contain one or more recognition hypotheses (up to the
   * maximum specified in `max_alternatives`).
   * These alternatives are ordered in terms of accuracy, with the top (first)
   * alternative being the most probable, as ranked by the recognizer.
   *
   * @generated from field: repeated nvidia.aceagent.chatcontroller.v1.SpeechRecognitionAlternative alternatives = 1;
   */
  alternatives: SpeechRecognitionAlternative[];

  /**
   * If `false`, this `StreamingRecognitionResult` represents an
   * interim result that may change. If `true`, this is the final time the
   * speech service will return this particular `StreamingRecognitionResult`,
   * the recognizer will not return any further hypotheses for this portion of
   * the transcript and corresponding audio.
   *
   * @generated from field: bool is_final = 2;
   */
  isFinal: boolean;

  /**
   * An estimate of the likelihood that the recognizer will not
   * change its guess about this interim result. Values range from 0.0
   * (completely unstable) to 1.0 (completely stable).
   * This field is only provided for interim results (`is_final=false`).
   * The default of 0.0 is a sentinel value indicating `stability` was not set.
   *
   * @generated from field: float stability = 3;
   */
  stability: number;

  /**
   * For multi-channel audio, this is the channel number corresponding to the
   * recognized result for the audio from that channel.
   * For audio_channel_count = N, its output values can range from '1' to 'N'.
   *
   * @generated from field: int32 channel_tag = 5;
   */
  channelTag: number;

  /**
   * Length of audio processed so far in seconds
   *
   * @generated from field: float audio_processed = 6;
   */
  audioProcessed: number;

  constructor(data?: PartialMessage<StreamingRecognitionResult>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.StreamingRecognitionResult";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamingRecognitionResult;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamingRecognitionResult;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamingRecognitionResult;

  static equals(a: StreamingRecognitionResult | PlainMessage<StreamingRecognitionResult> | undefined, b: StreamingRecognitionResult | PlainMessage<StreamingRecognitionResult> | undefined): boolean;
}

/**
 * Alternative hypotheses (a.k.a. n-best list).
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.SpeechRecognitionAlternative
 */
export declare class SpeechRecognitionAlternative extends Message<SpeechRecognitionAlternative> {
  /**
   * Transcript text representing the words that the user spoke.
   *
   * @generated from field: string transcript = 1;
   */
  transcript: string;

  /**
   * The non-normalized confidence estimate. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. This field is set only for a non-streaming
   * result or, of a streaming result where `is_final=true`.
   * This field is not guaranteed to be accurate and users should not rely on it
   * to be always provided.
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;

  /**
   * A list of word-specific information for each recognized word. Only populated
   * if is_final=true
   *
   * @generated from field: repeated nvidia.aceagent.chatcontroller.v1.WordInfo words = 3;
   */
  words: WordInfo[];

  constructor(data?: PartialMessage<SpeechRecognitionAlternative>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.SpeechRecognitionAlternative";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeechRecognitionAlternative;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeechRecognitionAlternative;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeechRecognitionAlternative;

  static equals(a: SpeechRecognitionAlternative | PlainMessage<SpeechRecognitionAlternative> | undefined, b: SpeechRecognitionAlternative | PlainMessage<SpeechRecognitionAlternative> | undefined): boolean;
}

/**
 * Word-specific information for recognized words.
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.WordInfo
 */
export declare class WordInfo extends Message<WordInfo> {
  /**
   * Time offset relative to the beginning of the audio in ms
   * and corresponding to the start of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   *
   * @generated from field: int32 start_time = 1;
   */
  startTime: number;

  /**
   * Time offset relative to the beginning of the audio in ms
   * and corresponding to the end of the spoken word.
   * This field is only set if `enable_word_time_offsets=true` and only
   * in the top hypothesis.
   *
   * @generated from field: int32 end_time = 2;
   */
  endTime: number;

  /**
   * The word corresponding to this set of information.
   *
   * @generated from field: string word = 3;
   */
  word: string;

  /**
   * The non-normalized confidence estimate. A higher number indicates an
   * estimated greater likelihood that the recognized words are correct. This
   * field is not guaranteed to be accurate and users should not rely on it to
   * be always provided. The default of 0.0 is a sentinel value indicating
   * confidence was not set.
   *
   * @generated from field: float confidence = 4;
   */
  confidence: number;

  constructor(data?: PartialMessage<WordInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.WordInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WordInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WordInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WordInfo;

  static equals(a: WordInfo | PlainMessage<WordInfo> | undefined, b: WordInfo | PlainMessage<WordInfo> | undefined): boolean;
}

/**
 * Chat Engine Result json
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ChatEngineResponse
 */
export declare class ChatEngineResponse extends Message<ChatEngineResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * chat engine result
   *
   * @generated from field: string result = 2;
   */
  result: string;

  /**
   * @generated from field: float latency_ms = 3;
   */
  latencyMs: number;

  constructor(data?: PartialMessage<ChatEngineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ChatEngineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatEngineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatEngineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatEngineResponse;

  static equals(a: ChatEngineResponse | PlainMessage<ChatEngineResponse> | undefined, b: ChatEngineResponse | PlainMessage<ChatEngineResponse> | undefined): boolean;
}

/**
 * TTS result metadata
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.TTSResult
 */
export declare class TTSResult extends Message<TTSResult> {
  /**
   * TTS latency in milliseconds
   *
   * @generated from field: float latency_ms = 1;
   */
  latencyMs: number;

  constructor(data?: PartialMessage<TTSResult>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.TTSResult";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TTSResult;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TTSResult;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TTSResult;

  static equals(a: TTSResult | PlainMessage<TTSResult> | undefined, b: TTSResult | PlainMessage<TTSResult> | undefined): boolean;
}

/**
 * Chat controller pipeline state response
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.PipelineStateResponse
 */
export declare class PipelineStateResponse extends Message<PipelineStateResponse> {
  /**
   * @generated from field: nvidia.aceagent.chatcontroller.v1.PipelineState state = 1;
   */
  state: PipelineState;

  constructor(data?: PartialMessage<PipelineStateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.PipelineStateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PipelineStateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PipelineStateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PipelineStateResponse;

  static equals(a: PipelineStateResponse | PlainMessage<PipelineStateResponse> | undefined, b: PipelineStateResponse | PlainMessage<PipelineStateResponse> | undefined): boolean;
}

/**
 * Receive Audio API Response
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ReceiveAudioResponse
 */
export declare class ReceiveAudioResponse extends Message<ReceiveAudioResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * synthesized audio data
   *
   * @generated from field: bytes audio_content = 2;
   */
  audioContent: Uint8Array;

  /**
   * The encoding of the audio data
   *
   * @generated from field: nvidia.aceagent.chatcontroller.v1.AudioEncoding encoding = 3;
   */
  encoding: AudioEncoding;

  /**
   * The sample rate in hertz (Hz) of the audio data
   *
   * @generated from field: int32 sample_rate_hertz = 4;
   */
  sampleRateHertz: number;

  /**
   * The number of channels in the audio data. Only mono is supported
   *
   * @generated from field: int32 audio_channel_count = 5;
   */
  audioChannelCount: number;

  /**
   * frame size of audio data
   *
   * @generated from field: int32 frame_size = 6;
   */
  frameSize: number;

  constructor(data?: PartialMessage<ReceiveAudioResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ReceiveAudioResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceiveAudioResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceiveAudioResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceiveAudioResponse;

  static equals(a: ReceiveAudioResponse | PlainMessage<ReceiveAudioResponse> | undefined, b: ReceiveAudioResponse | PlainMessage<ReceiveAudioResponse> | undefined): boolean;
}

/**
 * Generic API status response message
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.APIStatusResponse
 */
export declare class APIStatusResponse extends Message<APIStatusResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * response message
   *
   * @generated from field: string response_msg = 2;
   */
  responseMsg: string;

  /**
   * API response status code as defined in `APIStatus`
   *
   * @generated from field: nvidia.aceagent.chatcontroller.v1.APIStatus status = 3;
   */
  status: APIStatus;

  constructor(data?: PartialMessage<APIStatusResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.APIStatusResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIStatusResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIStatusResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIStatusResponse;

  static equals(a: APIStatusResponse | PlainMessage<APIStatusResponse> | undefined, b: APIStatusResponse | PlainMessage<APIStatusResponse> | undefined): boolean;
}

/**
 *
 * Request message for standalone TTS synthesis of provided text transcript
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.SynthesizeSpeechRequest
 */
export declare class SynthesizeSpeechRequest extends Message<SynthesizeSpeechRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * transcript text to be synthesized
   *
   * @generated from field: string transcript = 2;
   */
  transcript: string;

  constructor(data?: PartialMessage<SynthesizeSpeechRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.SynthesizeSpeechRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SynthesizeSpeechRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SynthesizeSpeechRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SynthesizeSpeechRequest;

  static equals(a: SynthesizeSpeechRequest | PlainMessage<SynthesizeSpeechRequest> | undefined, b: SynthesizeSpeechRequest | PlainMessage<SynthesizeSpeechRequest> | undefined): boolean;
}

/**
 *
 * Request message for Chat API which will be sent to chat engine
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ChatRequest
 */
export declare class ChatRequest extends Message<ChatRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * bot name with version like {bot_name}_v{bot_version}, e.g chitchat_bot_v1.
   *
   * @generated from field: string bot_name = 2;
   */
  botName: string;

  /**
   * query
   *
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * unique id for identifying the query
   *
   * @generated from field: string query_id = 4;
   */
  queryId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 5;
   */
  userId: string;

  /**
   * The language of the supplied query string as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   *
   * @generated from field: string source_language = 6;
   */
  sourceLanguage: string;

  /**
   * The language of the response required from chat engine as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   *
   * @generated from field: string target_language = 7;
   */
  targetLanguage: string;

  /**
   * Flag to send standalone text requests, when set true reponse is not sent
   * to TTS when set to false reponse will be sent to TTS
   *
   * @generated from field: bool is_standalone = 8;
   */
  isStandalone: boolean;

  /**
   * key-value pair for user context to be sent to chat engine
   *
   * @generated from field: map<string, string> user_context = 9;
   */
  userContext: { [key: string]: string };

  /**
   * key-value pair for meta data to be sent to chat engine
   *
   * @generated from field: map<string, string> metadata = 10;
   */
  metadata: { [key: string]: string };

  constructor(data?: PartialMessage<ChatRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ChatRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatRequest;

  static equals(a: ChatRequest | PlainMessage<ChatRequest> | undefined, b: ChatRequest | PlainMessage<ChatRequest> | undefined): boolean;
}

/**
 *
 * Response message from chat engine for Chat API invocation
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.ChatResponse
 */
export declare class ChatResponse extends Message<ChatResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * query
   *
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * unique id for identifying the query
   *
   * @generated from field: string query_id = 3;
   */
  queryId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * session id if generated by chat engine
   *
   * @generated from field: string session_id = 5;
   */
  sessionId: string;

  /**
   * chat engine response for the query passed in `ChatRequest`
   *
   * @generated from field: string text = 6;
   */
  text: string;

  /**
   * chat engine cleaned up response text after markdown language tags removal
   *
   * @generated from field: string cleaned_text = 7;
   */
  cleanedText: string;

  /**
   * flag to indicate whether this is final response or intermediate response, when true
   * there will be no more responses for the requested `ChatRequest`
   *
   * @generated from field: bool is_final = 8;
   */
  isFinal: boolean;

  /**
   * chat engine response in json format
   *
   * @generated from field: string json_response = 9;
   */
  jsonResponse: string;

  constructor(data?: PartialMessage<ChatResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.ChatResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatResponse;

  static equals(a: ChatResponse | PlainMessage<ChatResponse> | undefined, b: ChatResponse | PlainMessage<ChatResponse> | undefined): boolean;
}

/**
 *
 * Request message for Event API which will be sent to chat engine
 *
 * @generated from message nvidia.aceagent.chatcontroller.v1.EventRequest
 */
export declare class EventRequest extends Message<EventRequest> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * bot name with version like {bot_name}_v{bot_version}, e.g chitchat_bot_v1.
   *
   * @generated from field: string bot_name = 2;
   */
  botName: string;

  /**
   * event type
   *
   * @generated from field: string event_type = 3;
   */
  eventType: string;

  /**
   * unique event id
   *
   * @generated from field: string event_id = 4;
   */
  eventId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 5;
   */
  userId: string;

  /**
   * key-value pair for user context to be sent to chat engine
   *
   * @generated from field: map<string, string> user_context = 6;
   */
  userContext: { [key: string]: string };

  /**
   * key-value pair for meta data to be sent to chat engine
   *
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string };

  constructor(data?: PartialMessage<EventRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.EventRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventRequest;

  static equals(a: EventRequest | PlainMessage<EventRequest> | undefined, b: EventRequest | PlainMessage<EventRequest> | undefined): boolean;
}

/**
 * @generated from message nvidia.aceagent.chatcontroller.v1.EventResponse
 */
export declare class EventResponse extends Message<EventResponse> {
  /**
   * unique id to identify the client connection
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * event type
   *
   * @generated from field: string event_type = 2;
   */
  eventType: string;

  /**
   * unique event id
   *
   * @generated from field: string event_id = 3;
   */
  eventId: string;

  /**
   * user id
   *
   * @generated from field: string user_id = 4;
   */
  userId: string;

  /**
   * text response
   *
   * @generated from field: string text = 5;
   */
  text: string;

  /**
   * @generated from field: string cleaned_text = 6;
   */
  cleanedText: string;

  /**
   * @generated from field: bool is_final = 7;
   */
  isFinal: boolean;

  /**
   * @generated from field: string json_response = 8;
   */
  jsonResponse: string;

  /**
   * @generated from field: repeated string events = 9;
   */
  events: string[];

  constructor(data?: PartialMessage<EventResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "nvidia.aceagent.chatcontroller.v1.EventResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventResponse;

  static equals(a: EventResponse | PlainMessage<EventResponse> | undefined, b: EventResponse | PlainMessage<EventResponse> | undefined): boolean;
}

